---
# Tasks

# General
- name: Update & install packages RHEL
  block:
    - name: Update system
      become: true
      dnf:
        name: "*"
        state: latest
    - name: Install Packages
      become: true
      dnf:
        name: "{{ packages }}"
        state: latest
  when: ansible_os_family == "RedHat"

- name: Update & install packages Debian
  block:
    - name: Update system
      become: true
      apt:
        upgrade: yes
        update_cache: yes
    - name: Install Packages
      become: true
      apt:
        name: "{{ packages }}"
        state: latest
  when: ansible_os_family == "Debian"

- name: Populate service facts
  service_facts:

# Installing node_exporter
- name: Install, configure and start node_exporter
  block:
    - name: Create node_exporter user
      become: true
      user:
        name: "{{ exporter_user }}"
        shell: /usr/bin/false
        create_home: false

    - name: Install x86 architecture package
      block:
        - name: Download node_exporter x86 architecture version
          get_url:
            url: "https://github.com/prometheus/node_exporter/releases/download/v{{ exporter_version }}/node_exporter-{{ exporter_version }}.linux-amd64.tar.gz"
            dest: "{{ exporter_download_location }}"

        - name: Untar node_exporter
          unarchive:
            src: "{{ exporter_download_location }}/node_exporter-{{ exporter_version }}.linux-amd64.tar.gz"
            remote_src: true
            dest: "{{ exporter_download_location }}"

        - name: Copy node_exporter binary
          become: true
          copy: 
            src: "{{ exporter_download_location }}/node_exporter-{{ exporter_version }}.linux-amd64/node_exporter"
            remote_src: true
            dest: /usr/local/bin/
            mode: '0755'
      when: ansible_architecture == "x86_64"

    - name: Install 64bit ARM architecture pakage
      block:
        - name: Download node_exporter aarch64 (ARM) version
          get_url:
            url: "https://github.com/prometheus/node_exporter/releases/download/v{{ exporter_version }}/node_exporter-{{ exporter_version }}.linux-armv7.tar.gz"
            dest: "{{ exporter_download_location }}"
          when: ansible_architecture == "aarch64"

        - name: Untar node_exporter
          unarchive:
            src: "{{ exporter_download_location }}/node_exporter-{{ exporter_version }}.linux-armv7.tar.gz"
            remote_src: true
            dest: "{{ exporter_download_location }}"

        - name: Copy node_exporter binary
          become: true
          copy: 
            src: "{{ exporter_download_location }}/node_exporter-{{ exporter_version }}.linux-armv7/node_exporter"
            remote_src: true
            dest: /usr/local/bin/
            mode: '0755'
      when: ansible_architecture == "aarch64"

    - name: Create systemd service for node_exporter
      become: true
      copy:
        src: node_exporter.service
        dest: /etc/systemd/system/node_exporter.service
  when: ansible_facts.services["node_exporter.service"] is not defined

# Post installation
- name: Reload systemd config
  become: true
  systemd:
    daemon_reload: yes
  notify: Restart node_exporter

- name: Cleanup obsolete files x86
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ exporter_download_location }}/node_exporter-{{ exporter_version }}.linux-amd64.tar.gz"
    - "{{ exporter_download_location }}/node_exporter-{{ exporter_version }}.linux-amd64"
  when: ansible_architecture == "x86_64"

- name: Cleanup obsolete files ARM
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ exporter_download_location }}/node_exporter-{{ exporter_version }}.linux-armv7.tar.gz"
    - "{{ exporter_download_location }}/node_exporter-{{ exporter_version }}.linux-armv7"
  when: ansible_architecture == "aarch64"

# Edit firewall rules
- name: Allow incoming traffic on port 9100
  become: true
  firewalld:
    port: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
  loop:
    - 9100/tcp
  notify: Reload firewalld
  when: ansible_os_family == "RedHat"